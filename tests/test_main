import os
import unittest
import copy
from kiutils.symbol import SymbolLib, Symbol
from kiutils.items.common import Property, Position, Effects, Font
from lib import load_json_files, update_component, create_or_update_library

class TestKiCadLibraryUpdater(unittest.TestCase):

    def setUp(self):
        self.directory = './components'
        self.json_data = load_json_files(self.directory)
        self.base_lib_path = os.path.join(self.directory, 'base_library.kicad_sym')
        self.output_lib_path = os.path.join(self.directory, 'Passives.kicad_sym')

    def test_load_json_files(self):
        self.assertTrue(len(self.json_data) > 0, "JSON files should be loaded")

    def test_update_component(self):
        base_lib = SymbolLib.from_file(self.base_lib_path)
        base_component = None
        for symbol in base_lib.symbols:
            if symbol.entryName == "base_resistor":
                base_component = symbol
                break

        properties = [
            {
                "key": "Value",
                "value": "5K1",
                "id": 1,
                "showName": False,
                "position": {"x": 0, "y": 0, "angle": 0},
                "effects": {
                    "hide": True
                }
            },
            {
                "key": "Tolerance",
                "value": "10%",
                "id": 2,
                "showName": False,
                "position": {"x": 0, "y": 0, "angle": 0},
                "effects": {
                    "hide": True
                }
            },
            {
                "key": "Footprint",
                "value": "easyeda2kicad:R0402",
                "id": 3,
                "showName": False,
                "position": {"x": 0, "y": 0, "angle": 0},
                "effects": {
                    "hide": True
                }
            }
        ]
        remove_properties = []
        updated_component = update_component(copy.deepcopy(base_component), properties, remove_properties)
        self.assertEqual(next(p.value for p in updated_component.properties if p.key == "Value"), "5K1")
        self.assertEqual(next(p.value for p in updated_component.properties if p.key == "Footprint"), "easyeda2kicad:R0402")
        self.assertEqual(next(p.value for p in updated_component.properties if p.key == "Tolerance"), "10%")

    def test_create_or_update_library(self):
        create_or_update_library(self.json_data, self.directory)
        new_lib = SymbolLib.from_file(self.output_lib_path)
        self.assertTrue(any(symbol.entryName == "0402WGF5101TCE" for symbol in new_lib.symbols), "0402WGF5101TCE should exist in the new library")

if __name__ == "__main__":
    unittest.main()